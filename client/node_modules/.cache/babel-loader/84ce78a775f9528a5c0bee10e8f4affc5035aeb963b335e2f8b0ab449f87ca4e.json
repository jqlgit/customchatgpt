{"ast":null,"code":"var _jsxFileName = \"/Users/justinli/Desktop/EnhancedGPT/client/src/App.js\",\n  _s = $RefreshSig$();\nimport \"./normalize.css\";\nimport \"./App.css\";\nimport { useState, useEffect } from \"react\";\n// Import the normalize.css and App.css files for styling the UI\n// Import the useState and useEffect hooks from the React library\n\n/**\n * TODO: add awesomefont font to search bar <span>+</span>\n * TODO: add welcome message to chat log\n * TODO: add text to speech\n */\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  // The useEffect hook is used to call the getModels function once when the app loads\n  useEffect(() => {\n    getModels();\n  }, []);\n\n  // Declare state variables for input, models, current model, and chat log\n  const [input, setInput] = useState(\"\");\n  const [models, setModels] = useState([]);\n  const [currentModel, setCurrentModel] = useState(\"text-davinci-003\");\n  const [chatLog, setChatLog] = useState([{\n    user: \"gpt\",\n    message: \"How can I help you?\"\n  }]);\n\n  // function to clear the chat log\n  const clearChatLog = () => {\n    setChatLog([]);\n  };\n\n  // function to fetch the list of available models from the local server\n  function getModels() {\n    fetch(\"http://localhost:3080/models\").then(response => response.json()).then(data => setModels(data.models.data));\n  }\n\n  // Define a function to handle the form submission\n  async function handleSubmit(e) {\n    // Prevent the default form submission behavior\n    e.preventDefault();\n\n    // Add the user's input to the chat log\n    let chatLogNew = [...chatLog, {\n      user: \"me\",\n      message: `${input}`\n    }];\n    // Clear the input field\n    setInput(\"\");\n    // Update the chat log state\n    setChatLog(chatLogNew);\n\n    // Map the chat log array to a string with newline separators\n    const messages = chatLogNew.map(message => message.message).join(\"\\n\");\n    // Send a POST request to the local server with the chat log and the current model\n    const response = await fetch(\"http://localhost:3080\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        message: messages,\n        currentModel\n      })\n    });\n\n    // Update the chat log with the response from the server\n    const data = await response.json();\n    setChatLog([...chatLogNew, {\n      user: \"gpt\",\n      message: `${data.message}`\n    }]);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"aside\", {\n      className: \"side-menu\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"side-menu-button\",\n        onClick: clearChatLog,\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          children: \"+\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 11\n        }, this), \"New Chat\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"Models\",\n        children: /*#__PURE__*/_jsxDEV(\"select\", {\n          onChange: e => {\n            setCurrentModel(e.target.value);\n          },\n          children: models.map(model => /*#__PURE__*/_jsxDEV(\"option\", {\n            id: model.id,\n            children: model.id\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 87,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n      className: \"chat-box\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-log\",\n        children: chatLog.map((message, index) => /*#__PURE__*/_jsxDEV(ChatMessage, {\n          message: message\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-input-holder\",\n        children: /*#__PURE__*/_jsxDEV(\"form\", {\n          onSubmit: handleSubmit,\n          children: /*#__PURE__*/_jsxDEV(\"input\", {\n            rows: \"1\",\n            value: input,\n            onChange: e => setInput(e.target.value) //diff\n            ,\n            className: \"chat-input-textarea\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 101,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 74,\n    columnNumber: 5\n  }, this);\n}\n\n// Define a functional component to render a chat message\n_s(App, \"J9W2GhoDDVFDKJUr9c3h7A8NUA8=\");\n_c = App;\nconst ChatMessage = _ref => {\n  let {\n    message\n  } = _ref;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `chat-message ${message.user === \"gpt\" && \"chatgpt\"}`,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-message-center\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: `avatar ${message.user === \"gpt\" && \"chatgpt\"}`,\n        children: message.user === \"gpt\" && /*#__PURE__*/_jsxDEV(\"svg\", {\n          transform: \"scale(0.8)\",\n          width: 41,\n          height: 41,\n          fill: \"none\",\n          xmlns: \"http://www.w3.org/2000/svg\",\n          strokeWidth: 1.5,\n          className: \"h-6 w-6\",\n          children: /*#__PURE__*/_jsxDEV(\"path\", {\n            d: \"M37.532 16.87a9.963 9.963 0 0 0-.856-8.184 10.078 10.078 0 0 0-10.855-4.835A9.964 9.964 0 0 0 18.306.5a10.079 10.079 0 0 0-9.614 6.977 9.967 9.967 0 0 0-6.664 4.834 10.08 10.08 0 0 0 1.24 11.817 9.965 9.965 0 0 0 .856 8.185 10.079 10.079 0 0 0 10.855 4.835 9.965 9.965 0 0 0 7.516 3.35 10.078 10.078 0 0 0 9.617-6.981 9.967 9.967 0 0 0 6.663-4.834 10.079 10.079 0 0 0-1.243-11.813ZM22.498 37.886a7.474 7.474 0 0 1-4.799-1.735c.061-.033.168-.091.237-.134l7.964-4.6a1.294 1.294 0 0 0 .655-1.134V19.054l3.366 1.944a.12.12 0 0 1 .066.092v9.299a7.505 7.505 0 0 1-7.49 7.496ZM6.392 31.006a7.471 7.471 0 0 1-.894-5.023c.06.036.162.099.237.141l7.964 4.6a1.297 1.297 0 0 0 1.308 0l9.724-5.614v3.888a.12.12 0 0 1-.048.103l-8.051 4.649a7.504 7.504 0 0 1-10.24-2.744ZM4.297 13.62A7.469 7.469 0 0 1 8.2 10.333c0 .068-.004.19-.004.274v9.201a1.294 1.294 0 0 0 .654 1.132l9.723 5.614-3.366 1.944a.12.12 0 0 1-.114.01L7.04 23.856a7.504 7.504 0 0 1-2.743-10.237Zm27.658 6.437-9.724-5.615 3.367-1.943a.121.121 0 0 1 .113-.01l8.052 4.648a7.498 7.498 0 0 1-1.158 13.528v-9.476a1.293 1.293 0 0 0-.65-1.132Zm3.35-5.043c-.059-.037-.162-.099-.236-.141l-7.965-4.6a1.298 1.298 0 0 0-1.308 0l-9.723 5.614v-3.888a.12.12 0 0 1 .048-.103l8.05-4.645a7.497 7.497 0 0 1 11.135 7.763Zm-21.063 6.929-3.367-1.944a.12.12 0 0 1-.065-.092v-9.299a7.497 7.497 0 0 1 12.293-5.756 6.94 6.94 0 0 0-.236.134l-7.965 4.6a1.294 1.294 0 0 0-.654 1.132l-.006 11.225Zm1.829-3.943 4.33-2.501 4.332 2.5v5l-4.331 2.5-4.331-2.5V18Z\",\n            fill: \"currentColor\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 130,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"message\",\n        children: message.message\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 117,\n    columnNumber: 5\n  }, this);\n};\n_c2 = ChatMessage;\nexport default App;\n\n/**\n * DESCRIPTION:\n * This code is a React component that allows users to chat with an OpenAI language model.\n * When the component mounts, it sends a GET request to the server to retrieve a list of available models.\n * The user can then select a model from a dropdown menu and enter a message in the chat form.\n * When the form is submitted, the component sends a POST request to the server with the chat log and\n * the selected model as the request body. The server responds with a message from the language model,\n * which is displayed to the user and added to the chat log. The component also includes a button that allows\n * the user to clear the chat log.\n */\nvar _c, _c2;\n$RefreshReg$(_c, \"App\");\n$RefreshReg$(_c2, \"ChatMessage\");","map":{"version":3,"names":["useState","useEffect","App","getModels","input","setInput","models","setModels","currentModel","setCurrentModel","chatLog","setChatLog","user","message","clearChatLog","fetch","then","response","json","data","handleSubmit","e","preventDefault","chatLogNew","messages","map","join","method","headers","body","JSON","stringify","target","value","model","id","index","ChatMessage"],"sources":["/Users/justinli/Desktop/EnhancedGPT/client/src/App.js"],"sourcesContent":["import \"./normalize.css\";\nimport \"./App.css\";\nimport { useState, useEffect } from \"react\";\n// Import the normalize.css and App.css files for styling the UI\n// Import the useState and useEffect hooks from the React library\n\n/**\n * TODO: add awesomefont font to search bar <span>+</span>\n * TODO: add welcome message to chat log\n * TODO: add text to speech\n */\n\nfunction App() {\n  // The useEffect hook is used to call the getModels function once when the app loads\n  useEffect(() => {\n    getModels();\n  }, []);\n\n  // Declare state variables for input, models, current model, and chat log\n  const [input, setInput] = useState(\"\");\n  const [models, setModels] = useState([]);\n  const [currentModel, setCurrentModel] = useState(\"text-davinci-003\");\n  const [chatLog, setChatLog] = useState([\n    {\n      user: \"gpt\",\n      message: \"How can I help you?\",\n    },\n  ]);\n\n  // function to clear the chat log\n  const clearChatLog = () => {\n    setChatLog([]);\n  };\n\n  // function to fetch the list of available models from the local server\n  function getModels() {\n    fetch(\"http://localhost:3080/models\")\n      .then((response) => response.json())\n      .then((data) => setModels(data.models.data));\n  }\n\n  // Define a function to handle the form submission\n  async function handleSubmit(e) {\n    // Prevent the default form submission behavior\n    e.preventDefault();\n\n    // Add the user's input to the chat log\n    let chatLogNew = [...chatLog, { user: \"me\", message: `${input}` }];\n    // Clear the input field\n    setInput(\"\");\n    // Update the chat log state\n    setChatLog(chatLogNew);\n\n    // Map the chat log array to a string with newline separators\n    const messages = chatLogNew.map((message) => message.message).join(\"\\n\");\n    // Send a POST request to the local server with the chat log and the current model\n    const response = await fetch(\"http://localhost:3080\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({\n        message: messages,\n        currentModel,\n      }),\n    });\n\n    // Update the chat log with the response from the server\n    const data = await response.json();\n    setChatLog([...chatLogNew, { user: \"gpt\", message: `${data.message}` }]);\n  }\n\n  return (\n    <div className=\"App\">\n      <aside className=\"side-menu\">\n        <div className=\"side-menu-button\" onClick={clearChatLog}>\n          <span>+</span>\n          New Chat\n        </div>\n        <div className=\"Models\">\n          <select\n            onChange={(e) => {\n              setCurrentModel(e.target.value);\n            }}\n          >\n            {models.map((model) => (\n              <option id={model.id}>{model.id}</option>\n            ))}\n          </select>\n        </div>\n      </aside>\n      <section className=\"chat-box\">\n        <div className=\"chat-log\">\n          {chatLog.map((message, index) => (\n            <ChatMessage key={index} message={message} />\n          ))}\n        </div>\n\n        <div className=\"chat-input-holder\">\n          <form onSubmit={handleSubmit}>\n            <input\n              rows=\"1\"\n              value={input}\n              onChange={(e) => setInput(e.target.value)} //diff\n              className=\"chat-input-textarea\"\n            ></input>\n          </form>\n        </div>\n      </section>\n    </div>\n  );\n}\n\n// Define a functional component to render a chat message\nconst ChatMessage = ({ message }) => {\n  return (\n    <div className={`chat-message ${message.user === \"gpt\" && \"chatgpt\"}`}>\n      <div className=\"chat-message-center\">\n        <div className={`avatar ${message.user === \"gpt\" && \"chatgpt\"}`}>\n          {message.user === \"gpt\" && (\n            <svg\n              transform=\"scale(0.8)\"\n              width={41}\n              height={41}\n              fill=\"none\"\n              xmlns=\"http://www.w3.org/2000/svg\"\n              strokeWidth={1.5}\n              className=\"h-6 w-6\"\n            >\n              <path\n                d=\"M37.532 16.87a9.963 9.963 0 0 0-.856-8.184 10.078 10.078 0 0 0-10.855-4.835A9.964 9.964 0 0 0 18.306.5a10.079 10.079 0 0 0-9.614 6.977 9.967 9.967 0 0 0-6.664 4.834 10.08 10.08 0 0 0 1.24 11.817 9.965 9.965 0 0 0 .856 8.185 10.079 10.079 0 0 0 10.855 4.835 9.965 9.965 0 0 0 7.516 3.35 10.078 10.078 0 0 0 9.617-6.981 9.967 9.967 0 0 0 6.663-4.834 10.079 10.079 0 0 0-1.243-11.813ZM22.498 37.886a7.474 7.474 0 0 1-4.799-1.735c.061-.033.168-.091.237-.134l7.964-4.6a1.294 1.294 0 0 0 .655-1.134V19.054l3.366 1.944a.12.12 0 0 1 .066.092v9.299a7.505 7.505 0 0 1-7.49 7.496ZM6.392 31.006a7.471 7.471 0 0 1-.894-5.023c.06.036.162.099.237.141l7.964 4.6a1.297 1.297 0 0 0 1.308 0l9.724-5.614v3.888a.12.12 0 0 1-.048.103l-8.051 4.649a7.504 7.504 0 0 1-10.24-2.744ZM4.297 13.62A7.469 7.469 0 0 1 8.2 10.333c0 .068-.004.19-.004.274v9.201a1.294 1.294 0 0 0 .654 1.132l9.723 5.614-3.366 1.944a.12.12 0 0 1-.114.01L7.04 23.856a7.504 7.504 0 0 1-2.743-10.237Zm27.658 6.437-9.724-5.615 3.367-1.943a.121.121 0 0 1 .113-.01l8.052 4.648a7.498 7.498 0 0 1-1.158 13.528v-9.476a1.293 1.293 0 0 0-.65-1.132Zm3.35-5.043c-.059-.037-.162-.099-.236-.141l-7.965-4.6a1.298 1.298 0 0 0-1.308 0l-9.723 5.614v-3.888a.12.12 0 0 1 .048-.103l8.05-4.645a7.497 7.497 0 0 1 11.135 7.763Zm-21.063 6.929-3.367-1.944a.12.12 0 0 1-.065-.092v-9.299a7.497 7.497 0 0 1 12.293-5.756 6.94 6.94 0 0 0-.236.134l-7.965 4.6a1.294 1.294 0 0 0-.654 1.132l-.006 11.225Zm1.829-3.943 4.33-2.501 4.332 2.5v5l-4.331 2.5-4.331-2.5V18Z\"\n                fill=\"currentColor\"\n              />\n            </svg>\n          )}\n        </div>\n        <div className=\"message\">{message.message}</div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n\n/**\n * DESCRIPTION:\n * This code is a React component that allows users to chat with an OpenAI language model.\n * When the component mounts, it sends a GET request to the server to retrieve a list of available models.\n * The user can then select a model from a dropdown menu and enter a message in the chat form.\n * When the form is submitted, the component sends a POST request to the server with the chat log and\n * the selected model as the request body. The server responds with a message from the language model,\n * which is displayed to the user and added to the chat log. The component also includes a button that allows\n * the user to clear the chat log.\n */\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}